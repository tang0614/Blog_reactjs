{"ast":null,"code":"import _objectSpread from\"/Users/xinyutang/Dropbox/My Mac (MacBook-Pro.hsd1.ma.comcast.net)/Documents/react/xinyu-bakingblog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/xinyutang/Dropbox/My Mac (MacBook-Pro.hsd1.ma.comcast.net)/Documents/react/xinyu-bakingblog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{projectFirestore}from\"../firebase/config\";var useFirestore=function useFirestore(collection){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),docs=_useState2[0],setDocs=_useState2[1];useEffect(function(){var unsub=projectFirestore.collection(collection).orderBy(\"createdAt\",\"desc\").onSnapshot(function(snap){console.log(\"snap\",snap);var documents=[];snap.forEach(function(doc){console.log(\"calling use firestore\");documents.push(_objectSpread(_objectSpread({},doc.data()),{},{id:doc.id}));});setDocs(documents);});return function(){return unsub();};// this is a cleanup function that react will run when\n// a component using the hook unmounts\n},[collection]);return{docs:docs};};export default useFirestore;","map":{"version":3,"sources":["/Users/xinyutang/Dropbox/My Mac (MacBook-Pro.hsd1.ma.comcast.net)/Documents/react/xinyu-bakingblog/src/hook/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","console","log","documents","forEach","doc","push","data","id"],"mappings":"ibAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,UAAD,CAAgB,eACXJ,QAAQ,CAAC,EAAD,CADG,wCAC5BK,IAD4B,eACtBC,OADsB,eAGnCL,SAAS,CAAC,UAAM,CACd,GAAMM,CAAAA,KAAK,CAAGL,gBAAgB,CAC3BE,UADW,CACAA,UADA,EAEXI,OAFW,CAEH,WAFG,CAEU,MAFV,EAGXC,UAHW,CAGA,SAACC,IAAD,CAAU,CACpBC,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBF,IAApB,EACA,GAAIG,CAAAA,SAAS,CAAG,EAAhB,CACAH,IAAI,CAACI,OAAL,CAAa,SAACC,GAAD,CAAS,CACpBJ,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACAC,SAAS,CAACG,IAAV,gCAAoBD,GAAG,CAACE,IAAJ,EAApB,MAAgCC,EAAE,CAAEH,GAAG,CAACG,EAAxC,IACD,CAHD,EAKAZ,OAAO,CAACO,SAAD,CAAP,CACD,CAZW,CAAd,CAcA,MAAO,kBAAMN,CAAAA,KAAK,EAAX,EAAP,CACA;AACA;AACD,CAlBQ,CAkBN,CAACH,UAAD,CAlBM,CAAT,CAoBA,MAAO,CAAEC,IAAI,CAAJA,IAAF,CAAP,CACD,CAxBD,CA0BA,cAAeF,CAAAA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        console.log(\"snap\", snap);\n        let documents = [];\n        snap.forEach((doc) => {\n          console.log(\"calling use firestore\");\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n\n        setDocs(documents);\n      });\n\n    return () => unsub();\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}